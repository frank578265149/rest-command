/*
 * CommandParser.jjt
 *
 * This file contains the entire grammar for ElasticSearch Splunk, the simple search
 * command.
 *
 * Based on FormsPlSql.jj by S. Ramanathan (sramji@rocketmail.com)
 * see javacc.dev.java.net/servlets/ProjectDocumentList?folderID=110
 *
 * Written by Huang Chen
 */

options {
  MULTI = true;
  NODE_DEFAULT_VOID = true;
  IGNORE_CASE = false;
  STATIC = false;
  JAVA_UNICODE_ESCAPE= true;
}


/*****************************************************************************\
 * Parser Class
\*****************************************************************************/

PARSER_BEGIN(CommandParser)
package com.everdata.parser;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.everdata.command.Option;
import com.everdata.command.Field;
import com.everdata.command.Function;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;


@SuppressWarnings( { "unchecked", "unused", "static-access" })
public class CommandParser {

  private AST_Start tree = null;  
  private ArrayList<Node> search = new ArrayList<Node>();  
  private ArrayList<Node> report = new ArrayList<Node>();
  
  public CommandParser(String command) throws ParseException {
    this(new ByteArrayInputStream(command.getBytes()));
    tree = this.Start();
    
    ArrayList<Node> container = search;
    
    for (Node child : tree.getChildren()) {
      if (child instanceof AST_Search){
        container.add(child);
      }else if (child instanceof AST_Join){
        container.add(child);
      }else if (child instanceof AST_Stats){
        container = report;
        container.add(child);
      }else if (child instanceof AST_Sort){
        container.add(child);
      }else if (child instanceof AST_Table){
        container.add(child);
      }

    }
  }
  
  public ArrayList<Node> getSearchCommandList(){
  	return search;
  }
  public ArrayList<Node> getReportCommandList(){
  	return report;
  }
  public AST_Start getInnerTree(){
    return tree;
  }
  
  
  public static void main(String args[]) throws ParseException {

    CommandParser p = null;
    if (args.length < 1) {

      System.out.println("Reading from stdin.");
      p = new CommandParser(System.in);

    } else {

      try {
        p = new CommandParser(new DataInputStream(new FileInputStream(args[0])));
        System.out.println("Reading from " + args[0]);
      } catch (FileNotFoundException e) {
        System.out.println(args[0] + " not found; reading from stdin.");
        p = new CommandParser(System.in);
      }

    } // else
    AST_Start node = null;
    	    
	node = p.Start();
	node.dump("");
	System.out.println("Parse Successful");
		
	p.ReInit(System.in);
	

  }
  

}

PARSER_END(CommandParser)

/*****************************************************************************\
 * Lexical Analysis
\*****************************************************************************/

SKIP:
{
  " " | "\f" | "\t" | "\r" | "\n"
}

/*
 *  Prefix   Meaning
 * ---------------------
 *  K_       Keyword
 *  O_       Operator
 *  S_       Substitute
 */

TOKEN: /* Command Keywords */
{
    < K_AND: "AND" >
  | < K_SEARCH: "SEARCH" >
  | < K_COUNTFIELD: "COUNTFIELD" >
  | < K_LIMIT: "LIMIT" >
  | < K_OTHERSTR: "OTHERSTR" >
  | < K_PERCENTFIELD: "PERCENTFIELD" >
  | < K_SHOWCOUNT: "SHOWCOUNT" >
  | < K_SHOWPERC: "SHOWPERC" >
  | < K_USEOTHER: "USEROTHER" >
  | < K_TIMEFORMAT: "TIMEFORMAT" >
  | < K_STARTTIME: "STARTTIME" >
  | < K_ENDTIME: "ENDTIME" >
  | < K_EARLIEST: "EARLIEST" >
  | < K_LATEST: "LATEST" >
  | < K_MINCOUNT: "MINCOUNT" >
  | < K_SOURCETYPE: "SOURCETYPE" >
  | < K_TOP: "TOP" >
  | < K_BY: "BY" >
  | < K_CREATE: "CREATE" >
  | < K_DELETE: "DELETE" >
  | < K_DESC: "DESC" >
  | < K_ASC: "ASC" >
  | < K_DESCRIBE: "DESCRIBE" >
  | < K_DISTINCT: "DISTINCT" >
  | < K_DROP: "DROP" >
  | < K_EXPLAIN: "EXPLAIN" >
  | < K_HELP: "HELP" >
  | < K_FLOAT: "FLOAT" >
  | < K_FROM: "FROM" >
  | < K_INDEX: "INDEX" >
  | < K_INSERT: "INSERT" >
  | < K_INTEGER: "INTEGER" >
  | < K_INTO: "INTO" >
  | < K_ON: "ON" >
  | < K_OR: "OR" >
  | < K_NOT: "NOT" >
  | < K_ORDER: "ORDER" >
  | < K_QUIT: "QUIT" >
  | < K_SELECT: "SELECT" >
  | < K_SET: "SET" >
  | < K_STRING: "STRING" >
  | < K_STATS: "STATS" >
  | < K_TABLE: "TABLE" >
  | < K_UPDATE: "UPDATE" >
  | < K_VALUES: "VALUES" >
  | < K_WHERE: "WHERE" >
  | < K_HASCHILD: "HASCHILD" >
  | < K_HASPARENT: "HASPARENT" >
  | < K_SUM: "SUM" >
  | < K_DC: "DC" >
  | < K_MIN: "MIN" >
  | < K_MAX: "MAX" >
  | < K_AVG: "AVG" >
  | < K_EVAL: "EVAL" >
  | < K_COUNT: "COUNT" >
  | < K_AS: "AS" >
  | < K_REGEX: "REGEX" >
  | < K_SORT: "SORT" >
  | < K_JOIN: "JOIN" >
  | < K_SPAN: "SPAN" >
  | < K_TIMESPAN: "TIMESPAN" >
  | < K_COUNTORDER: "COUNTORDER" >
  | < K_CARD: "CARD" >
}

TOKEN: /* Operators */
{
    < O_EQ: "=" >
  | < O_NEQ: "!=" >
  | < O_GT: ">" >
  | < O_GTE: ">=" >
  | < O_LT: "<" >
  | < O_LTE: "<=" >
  | < O_LPAREN: "(" >
  | < O_RPAREN: ")" >
  | < O_COMMA: "," >
  | < O_SEMI: ";" >
  | < O_QUOTE: "\"">
  | < O_VERTICAL: "|">
}

TOKEN:
{
	<S_CHINESE: (<CJK>)+ (<CJK>)* >
	|
	< #CJK: ["\u3040"-"\u318f","\u3300"-"\u337f","\u3400"-"\u3d2d","\u4e00"-"\u9fff","\uf900"-"\ufaff"]>
}

TOKEN: /* Numeric Constants */
{
  < S_INTEGER: ("-")? ( <DIGIT> )+ >
  |
  < #DIGIT: ["0" - "9"] >
  |
  < S_FLOAT: ("-")? ( <S_INTEGER> )? "." <S_INTEGER> >
}

TOKEN: /* IDs and Strings */
{
  < S_IDENTIFIER: ( <DIGIT> | <LETTER> | <SPECIAL_CHAR> )+ >
  |
  < #LETTER: ["a"-"z", "A"-"Z"] >
  |
  < #SPECIAL_CHAR: "$" | "_" | "/" | "+" | "-" | "*" | "?" | ":" | ".">
  |
  /*< S_IDENTIFIER_PREFIXWITHNUM: (<DIGIT>)+ ( <DIGIT> | <LETTER> | <SPECIAL_CHAR>)* >
  | */
  < S_QUOTED_STRING : "\"" (~[ "\"" ])* "\"" >
  |
  < S_SINGLE_QUOTED_STRING : "'" (~[ "'" ])* "'" >
}

SPECIAL_TOKEN: /* SQL Comments */
{
  < LINE_COMMENT: "--"(~["\r","\n"])* >
  |
  < MULTI_LINE_COMMENT: "/*" (~["*"])* "*" ("*" | (~["*","/"] (~["*"])* "*"))* "/" >
}

/*****************************************************************************\
 * Top-Level Statements
\*****************************************************************************/

AST_Start Start() #_Start : {}
{  
  SearchStatement() 
  (
  <O_VERTICAL> 
  
  ( JoinStatement() | StatsStatement() | SortStatement() | TableStatement() ) 
  
  )*
  <EOF>
  { return jjtThis; }
}


  
/* table <wc-field-list> */
void TableStatement() #_Table:{}
{
  <K_TABLE> FieldList()
}

/*join <field-list> [ subsearch ]*/
void JoinStatement() #_Join:{}
{
  <K_JOIN> FieldList() <O_LPAREN> SearchStatement() <O_RPAREN>
}

/*sort [<count>] (<sort-by-clause>)+ [desc]*/
void SortStatement() #_Sort:{}
{
  <K_SORT> [<S_INTEGER>{jjtThis.count = Integer.parseInt(token.image);}] 
  <S_IDENTIFIER> {jjtThis.addField(token.image);} 
  [<K_DESC>{jjtThis.setDesc(true);} | <K_ASC>{jjtThis.setDesc(false);}]

  (<O_COMMA> 
  <S_IDENTIFIER>{jjtThis.addField(token.image);}
  [<K_DESC>{jjtThis.setDesc(true);} | <K_ASC>{jjtThis.setDesc(false);}]
  )* 
}

void RegexStatement() #_Regex:{}
{
  <K_REGEX> ( (<S_IDENTIFIER> <O_EQ> <S_QUOTED_STRING>) | <S_QUOTED_STRING> )*
}

void StatsStatement() #_Stats:{}
{
  <K_STATS> 
  [
  <K_MINCOUNT> <O_EQ> <S_INTEGER>{jjtThis.mincounts.add(Integer.parseInt(token.image));} (<O_COMMA> <S_INTEGER>{jjtThis.mincounts.add(Integer.parseInt(token.image));})*
  |
  <K_LIMIT> <O_EQ> <S_INTEGER>  {jjtThis.limits.add(Integer.parseInt(token.image));} (<O_COMMA> <S_INTEGER>{jjtThis.limits.add(Integer.parseInt(token.image));})*
  |
  <K_SPAN> <O_EQ> <S_INTEGER>  { jjtThis.spans.add(Integer.parseInt(token.image)); }(<O_COMMA> <S_INTEGER>{ jjtThis.spans.add(Integer.parseInt(token.image));})*
  |
  <K_TIMESPAN> <O_EQ> <S_IDENTIFIER>  {jjtThis.timespans.add(token.image);}(<O_COMMA> <S_IDENTIFIER>{jjtThis.timespans.add(token.image);})*
  ]
  StatsFunction() ( <O_COMMA>StatsFunction() )* [ ByClause() ]
}

void StatsFunction() #_StatsFunc:{}
{    
  (
	  <K_COUNT> {jjtThis.func.type = Function.COUNT;}
	  | 
    <K_SUM> {jjtThis.func.type = Function.SUM;}
    |
    <K_DC> {jjtThis.func.type = Function.DC;}
    |
    <K_MAX> {jjtThis.func.type = Function.MAX;}
    |
    <K_MIN> {jjtThis.func.type = Function.MIN;}
    |
    <K_AVG> {jjtThis.func.type = Function.AVG;}
  ){ jjtThis.func.name = token.image; }
  
  <O_LPAREN>   
  (
  <S_IDENTIFIER> {jjtThis.func.fieldtype = Field.SINGLE; jjtThis.func.field = token.image; }
  | 
  <S_QUOTED_STRING>{jjtThis.func.fieldtype = Field.SCRIPT; jjtThis.func.field = token.image.substring(1, token.image.length() - 1); }
  )
  <O_RPAREN>
    
  [ <K_AS> <S_IDENTIFIER> {jjtThis.func.as = token.image;} ]
  [ <K_DESC>{jjtThis.func.order = -1;} | <K_ASC> {jjtThis.func.order = 1;}]
}

void EvalExpression() #_EvalExpr:{}
{
  <K_EVAL><O_LPAREN> <S_QUOTED_STRING>{jjtThis.script = token.image.substring(1, token.image.length() - 1);} <O_RPAREN> 
  
}

void DeleteStatement() #_Delete:{}
{
  <K_DELETE>
}


void FieldList() #_IdentList : {}
{

  <S_IDENTIFIER> {jjtThis.names.add(token.image);}
  ( <O_COMMA> <S_IDENTIFIER> {jjtThis.names.add(token.image);} )*
}

/*
void TopStatement() #_Top : {}
{
  <K_TOP> (LOOKAHEAD(2)TopOption())* FieldList() [ ByClause() ]
}
void TopOption() #_TopOption : {}
{

  <K_COUNTFIELD> <O_EQ> <S_IDENTIFIER> {jjtThis.opt.type = Option.COUNTFIELD; jjtThis.opt.value = token.image;}
  | 
  <K_LIMIT> <O_EQ> <S_INTEGER>  {jjtThis.opt.type = Option.LIMIT; jjtThis.opt.value = token.image;}
  | 
  <K_OTHERSTR> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.OTHERSTR; jjtThis.opt.value = token.image;}
  | 
  <K_PERCENTFIELD> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.PERCENTFIELD; jjtThis.opt.value = token.image;}
  | 
  <K_SHOWCOUNT> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.SHOWCOUNT; jjtThis.opt.value = token.image;}
  | 
  <K_SHOWPERC> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.SHOWPERC; jjtThis.opt.value = token.image;}
  | 
  <K_USEOTHER> <O_EQ> <S_IDENTIFIER> {jjtThis.opt.type = Option.USEOTHER; jjtThis.opt.value = token.image;}
  |
  <K_MINCOUNT> <O_EQ> <S_INTEGER> {jjtThis.opt.type = Option.MINCOUNT; jjtThis.opt.value = token.image;}
  
}
*/

void ByClause() #_ByIdentList : {}
{
  <K_BY> 
  (
  <K_EVAL><O_LPAREN> <S_QUOTED_STRING>{jjtThis.addField(token.image.substring(1, token.image.length() - 1));jjtThis.setScript();} <O_RPAREN>  
  [ <K_AS> <S_IDENTIFIER> {jjtThis.setAs(token.image);} ]
  |
  <S_IDENTIFIER> {jjtThis.addField(token.image);} 
  )
  [ <K_COUNTORDER> {jjtThis.setCountOrder();}]
  [<K_DESC>{jjtThis.setDesc(true);} | <K_ASC>{jjtThis.setDesc(false);}]
  ( 
    <O_COMMA> 
    (      
      <K_EVAL><O_LPAREN> <S_QUOTED_STRING>{jjtThis.addField(token.image.substring(1, token.image.length() - 1));jjtThis.setScript();} <O_RPAREN> 
      [ <K_AS> <S_IDENTIFIER> {jjtThis.setAs(token.image);} ]
    |
      <S_IDENTIFIER> {jjtThis.addField(token.image);} 
    
    )

    [ <K_COUNTORDER> {jjtThis.setCountOrder();}] 
    [<K_DESC>{jjtThis.setDesc(true);} | <K_ASC>{jjtThis.setDesc(false);}]
  )*
}


void SearchStatement() #_Search:{}
{
  <K_SEARCH> ( LOOKAHEAD(2)SearchOption() )* [ BooleanExpression() ] 
}

void BooleanExpression() #_OrExpr : {}
{
  AndExpression() ( <K_OR> AndExpression() )*
}

void AndExpression() #_AndExpr : {}
{
  UnaryExpression() ( <K_AND> UnaryExpression() )*
}

void UnaryExpression() #_UnaryExpr: {}
{
  [<K_NOT>{jjtThis.isNot = true;}]
  (LOOKAHEAD(<O_LPAREN>  BooleanExpression() <O_RPAREN> ) <O_LPAREN> BooleanExpression() <O_RPAREN>
  | 
  PredicateExpression()
  )
}

void SearchOption() #_SearchOption :{} {
  <K_HASCHILD> <O_EQ> <O_LPAREN> <K_SOURCETYPE> <O_EQ> <S_IDENTIFIER>{jjtThis.opt.type = Option.HASCHILD; jjtThis.opt.value = token.image;} BooleanExpression() <O_RPAREN> 
  |
  <K_HASPARENT> <O_EQ> <O_LPAREN> <K_SOURCETYPE> <O_EQ> <S_IDENTIFIER>{jjtThis.opt.type = Option.HASPARENT; jjtThis.opt.value = token.image;} BooleanExpression() <O_RPAREN>
  |
  <K_TIMEFORMAT> <O_EQ> <S_IDENTIFIER> {jjtThis.opt.type = Option.TIMEFORMAT; jjtThis.opt.value = token.image;}
  |
  <K_STARTTIME> <O_EQ> 
  (
  <S_IDENTIFIER> { jjtThis.opt.type = Option.STARTTIME; jjtThis.opt.value = token.image;}
  |
  <S_QUOTED_STRING> {jjtThis.opt.type = Option.STARTTIME; jjtThis.opt.value = token.image.substring(1, token.image.length() - 1);}
  )
  |
  <K_ENDTIME> <O_EQ>(
  <S_IDENTIFIER> { jjtThis.opt.type = Option.ENDTIME; jjtThis.opt.value = token.image;}
  |
  <S_QUOTED_STRING> {jjtThis.opt.type = Option.ENDTIME; jjtThis.opt.value = token.image.substring(1, token.image.length() - 1);}
  )
  |
  <K_EARLIEST> <O_EQ> <S_IDENTIFIER> { jjtThis.opt.type = Option.EARLIEST; jjtThis.opt.value = token.image;}
  |
  <K_LATEST> <O_EQ> <S_IDENTIFIER> { jjtThis.opt.type = Option.LATEST; jjtThis.opt.value = token.image;}
  |
  <K_SOURCETYPE> <O_EQ> <S_IDENTIFIER> { jjtThis.opt.type = Option.SOURCETYPE; jjtThis.opt.value = token.image;}(<O_COMMA><S_IDENTIFIER>{jjtThis.opt.value += ("," + token.image);})*
  |
  <K_INDEX> <O_EQ> <S_IDENTIFIER> { jjtThis.opt.type = Option.INDEX; jjtThis.opt.value = token.image;}(<O_COMMA><S_IDENTIFIER>{jjtThis.opt.value += ("," + token.image);})*
}

void PredicateExpression() #_PredicateExpression : {}
{

  LOOKAHEAD(2)ComparisonExpression()( LOOKAHEAD(2)ComparisonExpression() | TermExpression() )*
  |
  TermExpression() ( LOOKAHEAD(2)ComparisonExpression() | TermExpression() )*

}

void TermExpression() #_TermExpression :{} {

  (<S_INTEGER>
  |
  <S_FLOAT>  
  |
  <S_IDENTIFIER>
  ) {jjtThis.type = AST_TermExpression.TERM;jjtThis.term = token.image;}  
  |
  <S_QUOTED_STRING> {jjtThis.type = AST_TermExpression.PHRASE; jjtThis.term = token.image.substring(1, token.image.length() - 1);} 
  
}

void ComparisonExpression() #_ComparisonExpression :{}{

  <S_IDENTIFIER> {jjtThis.expr.field = token.image;}
  (
    <O_EQ> {jjtThis.expr.oper = Expression.EQ;}
  | <O_NEQ> {jjtThis.expr.oper = Expression.NEQ;}
  | <O_GT> {jjtThis.expr.oper = Expression.GT;}
  | <O_GTE> {jjtThis.expr.oper = Expression.GTE;}
  | <O_LT> {jjtThis.expr.oper = Expression.LT;}
  | <O_LTE>{jjtThis.expr.oper = Expression.LTE;}
  )
  (
  (  <S_INTEGER>|<S_FLOAT>|<S_IDENTIFIER>/*|<S_IDENTIFIER_PREFIXWITHNUM>*/ )  {jjtThis.expr.value = token.image ;jjtThis.expr.valueType = AST_TermExpression.TERM;}
  |
  <S_QUOTED_STRING> {jjtThis.expr.value = token.image.substring(1, token.image.length() - 1); jjtThis.expr.valueType = AST_TermExpression.PHRASE;}
  )
}


/*
void CreateTableStmt() #_CreateTable : {}
{
  <K_CREATE> <K_TABLE> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
  <O_LPAREN> ColumnList() <O_RPAREN>
}

void CreateIndexStmt() #_CreateIndex : {}
{
  <K_CREATE> <K_INDEX> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
  <K_ON> <S_IDENTIFIER>
  {jjtThis.ixTable = token.image;}
  <O_LPAREN> <S_IDENTIFIER> {jjtThis.ixColumn = token.image;} <O_RPAREN>
}

void DropTableStmt() #_DropTable : {}
{
  <K_DROP> <K_TABLE> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
}

void DropIndexStmt() #_DropIndex : {}
{
  <K_DROP> <K_INDEX> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
}

void DescribeStatement() #_Describe : {}
{
  <K_DESCRIBE> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
}

void InsertStatement() #_Insert : {}
{
  <K_INSERT> <K_INTO> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
  <K_VALUES> <O_LPAREN> SqlValueExpressionList() <O_RPAREN>
}

void SelectStatement() #_Select : {}
{
  [<K_EXPLAIN> {jjtThis.isExplain = true;}]
  <K_SELECT> [<K_DISTINCT> {jjtThis.isDistinct = true;}]
  SelectClause()
  FromClause()
  [ WhereClause() ]
  [ OrderByClause() ]
}

void UpdateStatement() #_Update : {}
{
  <K_UPDATE> <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
  <K_SET> ColumnValues()
  [ WhereClause() ]
}

void DeleteStatement() #_Delete : {}
{
  <K_DELETE> [<K_FROM>] <S_IDENTIFIER>
  {jjtThis.fileName = token.image;}
  [ WhereClause() ]
}


void ColumnList() #_IdentList : {}
{
  <S_IDENTIFIER> {jjtThis.names.add(token.image);}
  ColumnType()

  ( <O_COMMA>
    <S_IDENTIFIER> {jjtThis.names.add(token.image);}
    ColumnType() )*
}

void ColumnType() #_ColumnType : {}
{
  <K_INTEGER>
  {jjtThis.type = AttrType.INTEGER;
   jjtThis.size = 4;}
  |
  <K_FLOAT>
  {jjtThis.type = AttrType.FLOAT;
   jjtThis.size = 4;}
  |
  <K_STRING>
  {jjtThis.type = AttrType.STRING;
   jjtThis.size = 25;}
  [ <O_LPAREN>
    <S_INTEGER> {jjtThis.size = Integer.parseInt(token.image);}
    <O_RPAREN> ]
}

void SelectClause() #_IdentList : {}
{
  <O_STAR>
  |
  <S_IDENTIFIER> {jjtThis.names.add(token.image);}
  ( <O_COMMA> <S_IDENTIFIER> {jjtThis.names.add(token.image);} )*
}

void FromClause() #_IdentList : {}
{
  <K_FROM> <S_IDENTIFIER> {jjtThis.names.add(token.image);}
  ( <O_COMMA> <S_IDENTIFIER> {jjtThis.names.add(token.image);} )*
}

void WhereClause() : {}
{
  <K_WHERE> SqlExpression()
}

void OrderByClause() #_OrderBy : {}
{
  <K_ORDER> <K_BY>

  <S_IDENTIFIER> {jjtThis.addName(token.image);}
  [<K_DESC> {jjtThis.setDesc();}]

  ( <O_COMMA>
    <S_IDENTIFIER> {jjtThis.addName(token.image);}
    [<K_DESC> {jjtThis.setDesc();}] )*
}

void ColumnValues() #_IdentList : {}
{
  <S_IDENTIFIER>
  {jjtThis.names.add(token.image);}
  <O_EQ> SqlValueExpression()

  ( <O_COMMA> <S_IDENTIFIER>
    {jjtThis.names.add(token.image);}
    <O_EQ> SqlValueExpression() )*
}


void SqlExpression() #_OrExpr : {}
{
  SqlAndExpression() ( <K_OR> SqlAndExpression() )*
}

void SqlAndExpression() #_AndExpr : {}
{
  SqlRelationalExpression() ( <K_AND> SqlRelationalExpression() )*
}

void SqlRelationalExpression() #_ExprPred : {}
{
  SqlPrimaryExpression()

  Relop()
  {jjtThis.oper = AttrOperator.toValue(token.image);}

  SqlPrimaryExpression()
}



void SqlPrimaryExpression() #_ExprValue : {}
{
  <S_IDENTIFIER>
  {jjtThis.type = AttrType.COLNAME;
   jjtThis.value = token.image;}
  |
  SqlValueExpression()
  {jjtThis.type = ((AST_ExprValue) jjtThis.children[0]).type;
   jjtThis.value = ((AST_ExprValue) jjtThis.children[0]).value;
   jjtThis.children = null;}
}

void SqlValueExpression() #_ExprValue : {}
{
  <S_INTEGER>
  {jjtThis.type = AttrType.INTEGER;
   jjtThis.value = new Integer(token.image);}
  |
  <S_FLOAT>
  {jjtThis.type = AttrType.FLOAT;
   jjtThis.value = new Float(token.image);}
  |
  <S_STRING>
  {jjtThis.type = AttrType.STRING;
   jjtThis.value = token.image.substring(1, token.image.length() - 1);}
}

void SqlValueExpressionList() : {}
{
  SqlValueExpression() ( <O_COMMA> SqlValueExpression() )*
}
*/