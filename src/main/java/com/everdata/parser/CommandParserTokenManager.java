/* Generated By:JJTree&JavaCC: Do not edit this line. CommandParserTokenManager.java */
package com.everdata.parser;
import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.everdata.command.Option;
import com.everdata.command.Field;
import com.everdata.command.Function;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;

/** Token Manager. */
public class CommandParserTokenManager implements CommandParserConstants
{

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0, long active1)
{
   switch (pos)
   {
      case 0:
         if ((active0 & 0xffffffffffffffc0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            jjmatchedKind = 86;
            return 6;
         }
         if ((active1 & 0x8000L) != 0L)
            return 28;
         return -1;
      case 1:
         if ((active0 & 0x2080058008800000L) != 0L)
            return 6;
         if ((active0 & 0xdf7ffa7ff77fffc0L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 1;
            }
            return 6;
         }
         return -1;
      case 2:
         if ((active0 & 0x740220008500040L) != 0L)
            return 6;
         if ((active0 & 0xd83fdc7ff72fff80L) != 0L || (active1 & 0x1fL) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 2;
            }
            return 6;
         }
         return -1;
      case 3:
         if ((active0 & 0x8800084554000000L) != 0L || (active1 & 0x13L) != 0L)
            return 6;
         if ((active0 & 0x503fd43aa33fff80L) != 0L || (active1 & 0xcL) != 0L)
         {
            if (jjmatchedPos != 3)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 3;
            }
            return 6;
         }
         return -1;
      case 4:
         if ((active0 & 0x5009840a00000300L) != 0L || (active1 & 0x8L) != 0L)
            return 6;
         if ((active0 & 0x365030b33ffc80L) != 0L || (active1 & 0x4L) != 0L)
         {
            if (jjmatchedPos != 4)
            {
               jjmatchedKind = 86;
               jjmatchedPos = 4;
            }
            return 6;
         }
         return -1;
      case 5:
         if ((active0 & 0x6501003080080L) != 0L)
            return 6;
         if ((active0 & 0x300020b037fd00L) != 0L || (active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 5;
            return 6;
         }
         return -1;
      case 6:
         if ((active0 & 0x2080020000L) != 0L)
            return 6;
         if ((active0 & 0x3000003035fd00L) != 0L || (active1 & 0xcL) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 6;
            return 6;
         }
         return -1;
      case 7:
         if ((active0 & 0x10000030142400L) != 0L || (active1 & 0x4L) != 0L)
            return 6;
         if ((active0 & 0x2000000021d900L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 7;
            return 6;
         }
         return -1;
      case 8:
         if ((active0 & 0x20000000015000L) != 0L)
            return 6;
         if ((active0 & 0x208900L) != 0L || (active1 & 0x8L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 8;
            return 6;
         }
         return -1;
      case 9:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 9;
            return 6;
         }
         if ((active0 & 0x208100L) != 0L || (active1 & 0x8L) != 0L)
            return 6;
         return -1;
      case 10:
         if ((active0 & 0x800L) != 0L)
         {
            jjmatchedKind = 86;
            jjmatchedPos = 10;
            return 6;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0, long active1)
{
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0, active1), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0()
{
   switch(curChar)
   {
      case 33:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x40L);
      case 34:
         return jjStartNfaWithStates_0(0, 79, 28);
      case 40:
         return jjStopAtPos(0, 75);
      case 41:
         return jjStopAtPos(0, 76);
      case 44:
         return jjStopAtPos(0, 77);
      case 59:
         return jjStopAtPos(0, 78);
      case 60:
         jjmatchedKind = 73;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x400L);
      case 61:
         return jjStopAtPos(0, 69);
      case 62:
         jjmatchedKind = 71;
         return jjMoveStringLiteralDfa1_0(0x0L, 0x100L);
      case 65:
         return jjMoveStringLiteralDfa1_0(0x2400000008000040L, 0x0L);
      case 66:
         return jjMoveStringLiteralDfa1_0(0x800000L, 0x0L);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x1000000001000100L, 0x18L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x80000076000000L, 0x0L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x800000080060000L, 0x0L);
      case 70:
         return jjMoveStringLiteralDfa1_0(0x600000000L, 0x0L);
      case 72:
         return jjMoveStringLiteralDfa1_0(0x30000100000000L, 0x0L);
      case 73:
         return jjMoveStringLiteralDfa1_0(0x7800000000L, 0x0L);
      case 74:
         return jjMoveStringLiteralDfa1_0(0x0L, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa1_0(0x80200L, 0x0L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x300000000100000L, 0x0L);
      case 78:
         return jjMoveStringLiteralDfa1_0(0x20000000000L, 0x0L);
      case 79:
         return jjMoveStringLiteralDfa1_0(0x58000000400L, 0x0L);
      case 80:
         return jjMoveStringLiteralDfa1_0(0x800L, 0x0L);
      case 81:
         return jjMoveStringLiteralDfa1_0(0x80000000000L, 0x0L);
      case 82:
         return jjMoveStringLiteralDfa1_0(0x4000000000000000L, 0x0L);
      case 83:
         return jjMoveStringLiteralDfa1_0(0x8040f00000213080L, 0x2L);
      case 84:
         return jjMoveStringLiteralDfa1_0(0x1000000408000L, 0x4L);
      case 85:
         return jjMoveStringLiteralDfa1_0(0x2000000004000L, 0x0L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x4000000000000L, 0x0L);
      case 87:
         return jjMoveStringLiteralDfa1_0(0x8000000000000L, 0x0L);
      case 124:
         return jjStopAtPos(0, 80);
      default :
         return jjMoveNfa_0(0, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0, long active1)
{
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0, active1);
      return 1;
   }
   switch(curChar)
   {
      case 61:
         if ((active1 & 0x40L) != 0L)
            return jjStopAtPos(1, 70);
         else if ((active1 & 0x100L) != 0L)
            return jjStopAtPos(1, 72);
         else if ((active1 & 0x400L) != 0L)
            return jjStopAtPos(1, 74);
         break;
      case 65:
         return jjMoveStringLiteralDfa2_0(active0, 0x2350000000c0000L, active1, 0x10L);
      case 67:
         if ((active0 & 0x80000000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 55, 6);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x4000300116000880L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000003000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000020108200L, active1, 0x4L);
      case 76:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000L, active1, 0L);
      case 78:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 39, 6);
         return jjMoveStringLiteralDfa2_0(active0, 0x7800020040L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa2_0(active0, 0x9000020000600100L, active1, 0x9L);
      case 80:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000000L, active1, 0x2L);
      case 82:
         if ((active0 & 0x10000000000L) != 0L)
         {
            jjmatchedKind = 40;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x40441000000L, active1, 0L);
      case 83:
         if ((active0 & 0x2000000000000000L) != 0L)
         {
            jjmatchedKind = 61;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x8004000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000010400L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa2_0(active0, 0x40080000000000L, active1, 0L);
      case 86:
         return jjMoveStringLiteralDfa2_0(active0, 0xc00000000000000L, active1, 0L);
      case 88:
         return jjMoveStringLiteralDfa2_0(active0, 0x80000000L, active1, 0L);
      case 89:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(1, 23, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(0, active0, active1);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(0, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0, active1);
      return 2;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000010080L, active1, 0x2L);
      case 66:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L, active1, 0L);
      case 67:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(2, 27, 6);
         break;
      case 68:
         if ((active0 & 0x40L) != 0L)
            return jjStartNfaWithStates_0(2, 6, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x2040800020000L, active1, 0L);
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000001004000L, active1, 0L);
      case 71:
         if ((active0 & 0x400000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 58, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x4000000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa3_0(active0, 0x400L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000000L, active1, 0x1L);
      case 76:
         return jjMoveStringLiteralDfa3_0(active0, 0x4100102000000L, active1, 0L);
      case 77:
         if ((active0 & 0x40000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 54, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x8200L, active1, 0x4L);
      case 78:
         if ((active0 & 0x100000000000000L) != 0L)
         {
            jjmatchedKind = 56;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x640003000L, active1, 0L);
      case 80:
         if ((active0 & 0x400000L) != 0L)
            return jjStartNfaWithStates_0(2, 22, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x80000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000400000040800L, active1, 0x10L);
      case 83:
         return jjMoveStringLiteralDfa3_0(active0, 0x30001034000000L, active1, 0L);
      case 84:
         if ((active0 & 0x20000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 41, 6);
         else if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 6);
         return jjMoveStringLiteralDfa3_0(active0, 0x6000080000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000200100L, active1, 0x8L);
      case 88:
         if ((active0 & 0x200000000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 57, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(1, active0, active1);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(1, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0, active1);
      return 3;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000201000000L, active1, 0L);
      case 67:
         if ((active0 & 0x4000000L) != 0L)
         {
            jjmatchedKind = 26;
            jjmatchedPos = 3;
         }
         return jjMoveStringLiteralDfa4_0(active0, 0x10000010100800L, active1, 0L);
      case 68:
         if ((active1 & 0x10L) != 0L)
            return jjStartNfaWithStates_0(3, 68, 6);
         break;
      case 69:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000143802088400L, active1, 0x4L);
      case 73:
         return jjMoveStringLiteralDfa4_0(active0, 0x400000000200L, active1, 0L);
      case 76:
         if ((active0 & 0x800000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 59, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000080040000L, active1, 0L);
      case 77:
         if ((active0 & 0x400000000L) != 0L)
            return jjStartNfaWithStates_0(3, 34, 6);
         break;
      case 78:
         if ((active1 & 0x1L) != 0L)
            return jjStartNfaWithStates_0(3, 64, 6);
         else if ((active1 & 0x2L) != 0L)
            return jjStartNfaWithStates_0(3, 65, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000000000100L, active1, 0x8L);
      case 79:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 38, 6);
         break;
      case 80:
         if ((active0 & 0x40000000L) != 0L)
            return jjStartNfaWithStates_0(3, 30, 6);
         else if ((active0 & 0x100000000L) != 0L)
            return jjStartNfaWithStates_0(3, 32, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x20000000000000L, active1, 0L);
      case 82:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000000214080L, active1, 0L);
      case 84:
         if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 43, 6);
         else if ((active0 & 0x8000000000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 63, 6);
         return jjMoveStringLiteralDfa4_0(active0, 0x800020020000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa4_0(active0, 0x4000000000000L, active1, 0L);
      case 87:
         return jjMoveStringLiteralDfa4_0(active0, 0x3000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0, active1);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(2, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0, active1);
      return 4;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa5_0(active0, 0x20000080000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa5_0(active0, 0x100000201080L, active1, 0L);
      case 69:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 6);
         else if ((active0 & 0x8000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 51, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x4000000000800L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa5_0(active0, 0x8000L, active1, 0L);
      case 71:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa5_0(active0, 0x10000000000000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa5_0(active0, 0x20060000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa5_0(active0, 0x400000000000L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa5_0(active0, 0x104000L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000L, active1, 0L);
      case 82:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 42, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x1010000400L, active1, 0L);
      case 83:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 6);
         return jjMoveStringLiteralDfa5_0(active0, 0x80000L, active1, 0x4L);
      case 84:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(4, 9, 6);
         else if ((active0 & 0x200000000L) != 0L)
            return jjStartNfaWithStates_0(4, 33, 6);
         else if ((active0 & 0x1000000000000000L) != 0L)
         {
            jjmatchedKind = 60;
            jjmatchedPos = 4;
         }
         return jjMoveStringLiteralDfa5_0(active0, 0x2000003010100L, active1, 0x8L);
      case 88:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(4, 35, 6);
         else if ((active0 & 0x4000000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 62, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(3, active0, active1);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(3, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0, active1);
      return 5;
   }
   switch(curChar)
   {
      case 69:
         if ((active0 & 0x1000000L) != 0L)
            return jjStartNfaWithStates_0(5, 24, 6);
         else if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(5, 25, 6);
         else if ((active0 & 0x2000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 49, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x2000242000L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa6_0(active0, 0x100L, active1, 0L);
      case 71:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 46, 6);
         break;
      case 72:
         if ((active0 & 0x80L) != 0L)
            return jjStartNfaWithStates_0(5, 7, 6);
         break;
      case 73:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000090000000L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000L, active1, 0L);
      case 78:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000800L, active1, 0L);
      case 79:
         return jjMoveStringLiteralDfa6_0(active0, 0x9000L, active1, 0x8L);
      case 80:
         return jjMoveStringLiteralDfa6_0(active0, 0L, active1, 0x4L);
      case 82:
         return jjMoveStringLiteralDfa6_0(active0, 0x20000000000000L, active1, 0L);
      case 83:
         if ((active0 & 0x4000000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 50, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x400L, active1, 0L);
      case 84:
         if ((active0 & 0x80000L) != 0L)
            return jjStartNfaWithStates_0(5, 19, 6);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 36, 6);
         else if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 6);
         return jjMoveStringLiteralDfa6_0(active0, 0x14000L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(4, active0, active1);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(4, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0, active1);
      return 6;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa7_0(active0, 0L, active1, 0x4L);
      case 66:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000L, active1, 0L);
      case 67:
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000L, active1, 0L);
      case 69:
         if ((active0 & 0x20000L) != 0L)
            return jjStartNfaWithStates_0(6, 17, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x20000000000000L, active1, 0L);
      case 72:
         return jjMoveStringLiteralDfa7_0(active0, 0x4000L, active1, 0L);
      case 73:
         return jjMoveStringLiteralDfa7_0(active0, 0x10100L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa7_0(active0, 0x10000000000000L, active1, 0L);
      case 78:
         if ((active0 & 0x80000000L) != 0L)
            return jjStartNfaWithStates_0(6, 31, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L, active1, 0L);
      case 82:
         if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 37, 6);
         return jjMoveStringLiteralDfa7_0(active0, 0xa000L, active1, 0x8L);
      case 83:
         return jjMoveStringLiteralDfa7_0(active0, 0x40000L, active1, 0L);
      case 84:
         return jjMoveStringLiteralDfa7_0(active0, 0x200c00L, active1, 0L);
      case 85:
         return jjMoveStringLiteralDfa7_0(active0, 0x1000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0, active1);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(5, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0, active1);
      return 7;
   }
   switch(curChar)
   {
      case 67:
         if ((active0 & 0x2000L) != 0L)
            return jjStartNfaWithStates_0(7, 13, 6);
         break;
      case 68:
         if ((active0 & 0x10000000000000L) != 0L)
            return jjStartNfaWithStates_0(7, 52, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0L, active1, 0x8L);
      case 69:
         if ((active0 & 0x10000000L) != 0L)
            return jjStartNfaWithStates_0(7, 28, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x4100L, active1, 0L);
      case 70:
         return jjMoveStringLiteralDfa8_0(active0, 0x800L, active1, 0L);
      case 77:
         return jjMoveStringLiteralDfa8_0(active0, 0x18000L, active1, 0L);
      case 78:
         if ((active1 & 0x4L) != 0L)
            return jjStartNfaWithStates_0(7, 66, 6);
         return jjMoveStringLiteralDfa8_0(active0, 0x20000000001000L, active1, 0L);
      case 82:
         if ((active0 & 0x400L) != 0L)
            return jjStartNfaWithStates_0(7, 10, 6);
         break;
      case 84:
         if ((active0 & 0x40000L) != 0L)
            return jjStartNfaWithStates_0(7, 18, 6);
         else if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 6);
         else if ((active0 & 0x20000000L) != 0L)
            return jjStartNfaWithStates_0(7, 29, 6);
         break;
      case 89:
         return jjMoveStringLiteralDfa8_0(active0, 0x200000L, active1, 0L);
      default :
         break;
   }
   return jjStartNfa_0(6, active0, active1);
}
private int jjMoveStringLiteralDfa8_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(6, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(7, active0, active1);
      return 8;
   }
   switch(curChar)
   {
      case 65:
         return jjMoveStringLiteralDfa9_0(active0, 0x8000L, active1, 0L);
      case 69:
         if ((active0 & 0x10000L) != 0L)
            return jjStartNfaWithStates_0(8, 16, 6);
         return jjMoveStringLiteralDfa9_0(active0, 0L, active1, 0x8L);
      case 73:
         return jjMoveStringLiteralDfa9_0(active0, 0x800L, active1, 0L);
      case 76:
         return jjMoveStringLiteralDfa9_0(active0, 0x100L, active1, 0L);
      case 80:
         return jjMoveStringLiteralDfa9_0(active0, 0x200000L, active1, 0L);
      case 82:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(8, 14, 6);
         break;
      case 84:
         if ((active0 & 0x1000L) != 0L)
            return jjStartNfaWithStates_0(8, 12, 6);
         else if ((active0 & 0x20000000000000L) != 0L)
            return jjStartNfaWithStates_0(8, 53, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(7, active0, active1);
}
private int jjMoveStringLiteralDfa9_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(7, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(8, active0, active1);
      return 9;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(9, 8, 6);
         break;
      case 69:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(9, 21, 6);
         return jjMoveStringLiteralDfa10_0(active0, 0x800L, active1, 0L);
      case 82:
         if ((active1 & 0x8L) != 0L)
            return jjStartNfaWithStates_0(9, 67, 6);
         break;
      case 84:
         if ((active0 & 0x8000L) != 0L)
            return jjStartNfaWithStates_0(9, 15, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(8, active0, active1);
}
private int jjMoveStringLiteralDfa10_0(long old0, long active0, long old1, long active1)
{
   if (((active0 &= old0) | (active1 &= old1)) == 0L)
      return jjStartNfa_0(8, old0, old1);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(9, active0, 0L);
      return 10;
   }
   switch(curChar)
   {
      case 76:
         return jjMoveStringLiteralDfa11_0(active0, 0x800L);
      default :
         break;
   }
   return jjStartNfa_0(9, active0, 0L);
}
private int jjMoveStringLiteralDfa11_0(long old0, long active0)
{
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(9, old0, 0L);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(10, active0, 0L);
      return 11;
   }
   switch(curChar)
   {
      case 68:
         if ((active0 & 0x800L) != 0L)
            return jjStartNfaWithStates_0(11, 11, 6);
         break;
      default :
         break;
   }
   return jjStartNfa_0(10, active0, 0L);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x1ff0000000000000L, 0xffffffffffffc000L, 0xffffffffL, 0x600000000000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec3 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffL, 0x0L
};
static final long[] jjbitVec4 = {
   0xffffffffffffffffL, 0xffffffffffffffffL, 0x0L, 0x0L
};
static final long[] jjbitVec5 = {
   0x3fffffffffffL, 0x0L, 0x0L, 0x0L
};
static final long[] jjbitVec6 = {
   0xfffffffffffffffeL, 0xffffffffffffffffL, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec7 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 28;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if ((0x87ffec1000000000L & l) != 0L)
                  {
                     if (kind > 86)
                        kind = 86;
                     jjCheckNAdd(6);
                  }
                  else if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  else if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  if ((0x3ff000000000000L & l) != 0L)
                  {
                     if (kind > 83)
                        kind = 83;
                     jjCheckNAddStates(0, 2);
                  }
                  else if (curChar == 45)
                     jjCheckNAddStates(3, 6);
                  else if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  else if (curChar == 46)
                     jjCheckNAddTwoStates(4, 5);
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 28:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  else if (curChar == 34)
                  {
                     if (kind > 89)
                        kind = 89;
                  }
                  break;
               case 3:
                  if (curChar == 46)
                     jjCheckNAddTwoStates(4, 5);
                  break;
               case 4:
                  if (curChar == 45)
                     jjCheckNAdd(5);
                  break;
               case 5:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 85)
                     kind = 85;
                  jjCheckNAdd(5);
                  break;
               case 6:
                  if ((0x87ffec1000000000L & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(6);
                  break;
               case 7:
                  if (curChar == 34)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 8:
                  if ((0xfffffffbffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 9:
                  if (curChar == 34 && kind > 89)
                     kind = 89;
                  break;
               case 10:
                  if (curChar == 39)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 11:
                  if ((0xffffff7fffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(11, 12);
                  break;
               case 12:
                  if (curChar == 39 && kind > 90)
                     kind = 90;
                  break;
               case 13:
                  if (curChar != 45)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(14);
                  break;
               case 14:
                  if ((0xffffffffffffdbffL & l) == 0L)
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjCheckNAdd(14);
                  break;
               case 15:
                  if (curChar == 45)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 16:
                  if (curChar == 42)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 17:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 18:
                  if (curChar == 42)
                     jjCheckNAddStates(7, 9);
                  break;
               case 19:
                  if ((0xffff7bffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 20:
                  if ((0xfffffbffffffffffL & l) != 0L)
                     jjCheckNAddTwoStates(20, 18);
                  break;
               case 21:
                  if (curChar == 47 && kind > 92)
                     kind = 92;
                  break;
               case 22:
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 23:
                  if (curChar == 45)
                     jjCheckNAddStates(3, 6);
                  break;
               case 24:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAdd(24);
                  break;
               case 25:
                  if (curChar == 45)
                     jjCheckNAdd(26);
                  break;
               case 26:
                  if ((0x3ff000000000000L & l) != 0L)
                     jjCheckNAddTwoStates(26, 3);
                  break;
               case 27:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 83)
                     kind = 83;
                  jjCheckNAddStates(0, 2);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
               case 6:
                  if ((0x7fffffe87fffffeL & l) == 0L)
                     break;
                  if (kind > 86)
                     kind = 86;
                  jjCheckNAdd(6);
                  break;
               case 28:
               case 8:
                  jjCheckNAddTwoStates(8, 9);
                  break;
               case 11:
                  jjAddStates(10, 11);
                  break;
               case 14:
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
               case 20:
                  jjCheckNAddTwoStates(20, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (int)(curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 0:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(1);
                  break;
               case 28:
               case 8:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(8, 9);
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAddTwoStates(2, 1);
                  break;
               case 2:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 81)
                     kind = 81;
                  jjCheckNAdd(2);
                  break;
               case 11:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjAddStates(10, 11);
                  break;
               case 14:
                  if (!jjCanMove_1(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 91)
                     kind = 91;
                  jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 17:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(17, 18);
                  break;
               case 19:
               case 20:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2))
                     jjCheckNAddTwoStates(20, 18);
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 28 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
static final int[] jjnextStates = {
   24, 26, 3, 24, 25, 26, 3, 18, 19, 21, 11, 12, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 48:
         return ((jjbitVec2[i2] & l2) != 0L);
      case 49:
         return ((jjbitVec3[i2] & l2) != 0L);
      case 51:
         return ((jjbitVec4[i2] & l2) != 0L);
      case 61:
         return ((jjbitVec5[i2] & l2) != 0L);
      default :
         if ((jjbitVec0[i1] & l1) != 0L)
            return true;
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec7[i2] & l2) != 0L);
      default :
         if ((jjbitVec6[i1] & l1) != 0L)
            return true;
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, "\101\116\104", "\123\105\101\122\103\110", 
"\103\117\125\116\124\106\111\105\114\104", "\114\111\115\111\124", "\117\124\110\105\122\123\124\122", 
"\120\105\122\103\105\116\124\106\111\105\114\104", "\123\110\117\127\103\117\125\116\124", "\123\110\117\127\120\105\122\103", 
"\125\123\105\122\117\124\110\105\122", "\124\111\115\105\106\117\122\115\101\124", 
"\123\124\101\122\124\124\111\115\105", "\105\116\104\124\111\115\105", "\105\101\122\114\111\105\123\124", 
"\114\101\124\105\123\124", "\115\111\116\103\117\125\116\124", 
"\123\117\125\122\103\105\124\131\120\105", "\124\117\120", "\102\131", "\103\122\105\101\124\105", 
"\104\105\114\105\124\105", "\104\105\123\103", "\101\123\103", "\104\105\123\103\122\111\102\105", 
"\104\111\123\124\111\116\103\124", "\104\122\117\120", "\105\130\120\114\101\111\116", "\110\105\114\120", 
"\106\114\117\101\124", "\106\122\117\115", "\111\116\104\105\130", "\111\116\123\105\122\124", 
"\111\116\124\105\107\105\122", "\111\116\124\117", "\117\116", "\117\122", "\116\117\124", 
"\117\122\104\105\122", "\121\125\111\124", "\123\105\114\105\103\124", "\123\105\124", 
"\123\124\122\111\116\107", "\123\124\101\124\123", "\124\101\102\114\105", "\125\120\104\101\124\105", 
"\126\101\114\125\105\123", "\127\110\105\122\105", "\110\101\123\103\110\111\114\104", 
"\110\101\123\120\101\122\105\116\124", "\123\125\115", "\104\103", "\115\111\116", "\115\101\130", "\101\126\107", 
"\105\126\101\114", "\103\117\125\116\124", "\101\123", "\122\105\107\105\130", 
"\123\117\122\124", "\112\117\111\116", "\123\120\101\116", "\124\111\115\105\123\120\101\116", 
"\103\117\125\116\124\117\122\104\105\122", "\103\101\122\104", "\75", "\41\75", "\76", "\76\75", "\74", "\74\75", "\50", 
"\51", "\54", "\73", "\42", "\174", null, null, null, null, null, null, null, null, 
null, null, null, null, };

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
};
static final long[] jjtoToken = {
   0xffffffffffffffc1L, 0x66bffffL, 
};
static final long[] jjtoSkip = {
   0x3eL, 0x18000000L, 
};
static final long[] jjtoSpecial = {
   0x0L, 0x18000000L, 
};
protected JavaCharStream input_stream;
private final int[] jjrounds = new int[28];
private final int[] jjstateSet = new int[56];
protected char curChar;
/** Constructor. */
public CommandParserTokenManager(JavaCharStream stream){
   if (JavaCharStream.staticFlag)
      throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");
   input_stream = stream;
}

/** Constructor. */
public CommandParserTokenManager(JavaCharStream stream, int lexState){
   this(stream);
   SwitchTo(lexState);
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream)
{
   jjmatchedPos = jjnewStateCnt = 0;
   curLexState = defaultLexState;
   input_stream = stream;
   ReInitRounds();
}
private void ReInitRounds()
{
   int i;
   jjround = 0x80000001;
   for (i = 28; i-- > 0;)
      jjrounds[i] = 0x80000000;
}

/** Reinitialise parser. */
public void ReInit(JavaCharStream stream, int lexState)
{
   ReInit(stream);
   SwitchTo(lexState);
}

/** Switch to specified lex state. */
public void SwitchTo(int lexState)
{
   if (lexState >= 1 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
   else
      curLexState = lexState;
}

protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token specialToken = null;
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      matchedToken = jjFillToken();
      matchedToken.specialToken = specialToken;
      return matchedToken;
   }

   try { input_stream.backup(0);
      while (curChar <= 32 && (0x100003600L & (1L << curChar)) != 0L)
         curChar = input_stream.BeginToken();
   }
   catch (java.io.IOException e1) { continue EOFLoop; }
   jjmatchedKind = 0x7fffffff;
   jjmatchedPos = 0;
   curPos = jjMoveStringLiteralDfa0_0();
   if (jjmatchedKind != 0x7fffffff)
   {
      if (jjmatchedPos + 1 < curPos)
         input_stream.backup(curPos - jjmatchedPos - 1);
      if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
      {
         matchedToken = jjFillToken();
         matchedToken.specialToken = specialToken;
         return matchedToken;
      }
      else
      {
         if ((jjtoSpecial[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
         {
            matchedToken = jjFillToken();
            if (specialToken == null)
               specialToken = matchedToken;
            else
            {
               matchedToken.specialToken = specialToken;
               specialToken = (specialToken.next = matchedToken);
            }
         }
         continue EOFLoop;
      }
   }
   int error_line = input_stream.getEndLine();
   int error_column = input_stream.getEndColumn();
   String error_after = null;
   boolean EOFSeen = false;
   try { input_stream.readChar(); input_stream.backup(1); }
   catch (java.io.IOException e1) {
      EOFSeen = true;
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
      if (curChar == '\n' || curChar == '\r') {
         error_line++;
         error_column = 0;
      }
      else
         error_column++;
   }
   if (!EOFSeen) {
      input_stream.backup(1);
      error_after = curPos <= 1 ? "" : input_stream.GetImage();
   }
   throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

}