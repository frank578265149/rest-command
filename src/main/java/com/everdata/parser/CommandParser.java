/* Generated By:JJTree&JavaCC: Do not edit this line. CommandParser.java */
package com.everdata.parser;

import java.io.DataInputStream;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import com.everdata.command.Option;
import com.everdata.command.Field;
import com.everdata.command.Function;
import java.io.ByteArrayInputStream;
import java.util.ArrayList;


@SuppressWarnings( { "unchecked", "unused", "static-access" })
public class CommandParser/*@bgen(jjtree)*/implements CommandParserTreeConstants, CommandParserConstants {/*@bgen(jjtree)*/
  protected JJTCommandParserState jjtree = new JJTCommandParserState();
  private AST_Start tree = null;
  private ArrayList<Node> search = new ArrayList<Node>();
  private ArrayList<Node> report = new ArrayList<Node>();

  public CommandParser(String command) throws ParseException {
    this(new ByteArrayInputStream(command.getBytes()));
    tree = this.Start();

    ArrayList<Node> container = search;

    for (Node child : tree.getChildren()) {
      if (child instanceof AST_Search){
        container.add(child);
      }else if (child instanceof AST_Join){
        container.add(child);
      }else if (child instanceof AST_Stats){
        container = report;
        container.add(child);
      }else if (child instanceof AST_Sort){
        container.add(child);
      }else if (child instanceof AST_Table){
        container.add(child);
      }

    }
  }

  public ArrayList<Node> getSearchCommandList(){
        return search;
  }
  public ArrayList<Node> getReportCommandList(){
        return report;
  }
  public AST_Start getInnerTree(){
    return tree;
  }


  public static void main(String args[]) throws ParseException {

    CommandParser p = null;
    if (args.length < 1) {

      System.out.println("Reading from stdin.");
      p = new CommandParser(System.in);

    }else{

      try {
        p = new CommandParser(new DataInputStream(new FileInputStream(args[0])));
        System.out.println("Reading from " + args[0]);
      }catch (FileNotFoundException e) {
        System.out.println(args[0] + " not found; reading from stdin.");
        p = new CommandParser(System.in);
      }
    } 
    AST_Start node = null;

        node = p.Start();
        node.dump("");
        System.out.println("Parse Successful");

        p.ReInit(System.in);


  }

/*****************************************************************************\
 * Top-Level Statements
\*****************************************************************************/
  final public AST_Start Start() throws ParseException {
                             /*@bgen(jjtree) _Start */
  AST_Start jjtn000 = new AST_Start(JJT_START);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      SearchStatement();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_VERTICAL:
          ;
          break;
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(O_VERTICAL);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_JOIN:
          JoinStatement();
          break;
        case K_STATS:
          StatsStatement();
          break;
        case K_SORT:
          SortStatement();
          break;
        case K_TABLE:
          TableStatement();
          break;
        default:
          jj_la1[1] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
      jj_consume_token(0);
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    {if (true) return jjtn000;}
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

/* table <wc-field-list> */
  final public void TableStatement() throws ParseException {
                               /*@bgen(jjtree) _Table */
  AST_Table jjtn000 = new AST_Table(JJT_TABLE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_TABLE);
      FieldList();
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*join <field-list> [ subsearch ]*/
  final public void JoinStatement() throws ParseException {
                             /*@bgen(jjtree) _Join */
  AST_Join jjtn000 = new AST_Join(JJT_JOIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_JOIN);
      FieldList();
      jj_consume_token(O_LPAREN);
      SearchStatement();
      jj_consume_token(O_RPAREN);
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*sort [<count>] (<sort-by-clause>)+ [desc]*/
  final public void SortStatement() throws ParseException {
                             /*@bgen(jjtree) _Sort */
  AST_Sort jjtn000 = new AST_Sort(JJT_SORT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SORT);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
        jj_consume_token(S_INTEGER);
                        jjtn000.count = Integer.parseInt(token.image);
        break;
      default:
        jj_la1[2] = jj_gen;
        ;
      }
      jj_consume_token(S_IDENTIFIER);
                  jjtn000.addField(token.image);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DESC:
      case K_ASC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
          jj_consume_token(K_DESC);
            jjtn000.setDesc(true);
          break;
        case K_ASC:
          jj_consume_token(K_ASC);
                                              jjtn000.setDesc(false);
          break;
        default:
          jj_la1[3] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[4] = jj_gen;
        ;
      }
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_2;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
                 jjtn000.addField(token.image);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
        case K_ASC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DESC:
            jj_consume_token(K_DESC);
            jjtn000.setDesc(true);
            break;
          case K_ASC:
            jj_consume_token(K_ASC);
                                              jjtn000.setDesc(false);
            break;
          default:
            jj_la1[6] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[7] = jj_gen;
          ;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void RegexStatement() throws ParseException {
                               /*@bgen(jjtree) _Regex */
  AST_Regex jjtn000 = new AST_Regex(JJT_REGEX);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_REGEX);
      label_3:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
        case S_QUOTED_STRING:
          ;
          break;
        default:
          jj_la1[8] = jj_gen;
          break label_3;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          jj_consume_token(O_EQ);
          jj_consume_token(S_QUOTED_STRING);
          break;
        case S_QUOTED_STRING:
          jj_consume_token(S_QUOTED_STRING);
          break;
        default:
          jj_la1[9] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatsStatement() throws ParseException {
                               /*@bgen(jjtree) _Stats */
  AST_Stats jjtn000 = new AST_Stats(JJT_STATS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_STATS);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_LIMIT:
      case K_MINCOUNT:
      case K_SPAN:
      case K_TIMESPAN:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_MINCOUNT:
          jj_consume_token(K_MINCOUNT);
          jj_consume_token(O_EQ);
          jj_consume_token(S_INTEGER);
                                  jjtn000.mincounts.add(Integer.parseInt(token.image));
          label_4:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case O_COMMA:
              ;
              break;
            default:
              jj_la1[10] = jj_gen;
              break label_4;
            }
            jj_consume_token(O_COMMA);
            jj_consume_token(S_INTEGER);
                                                                                                                jjtn000.mincounts.add(Integer.parseInt(token.image));
          }
          break;
        case K_LIMIT:
          jj_consume_token(K_LIMIT);
          jj_consume_token(O_EQ);
          jj_consume_token(S_INTEGER);
                                 jjtn000.limits.add(Integer.parseInt(token.image));
          label_5:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case O_COMMA:
              ;
              break;
            default:
              jj_la1[11] = jj_gen;
              break label_5;
            }
            jj_consume_token(O_COMMA);
            jj_consume_token(S_INTEGER);
                                                                                                            jjtn000.limits.add(Integer.parseInt(token.image));
          }
          break;
        case K_SPAN:
          jj_consume_token(K_SPAN);
          jj_consume_token(O_EQ);
          jj_consume_token(S_INTEGER);
                                 jjtn000.spans.add(Integer.parseInt(token.image));
          label_6:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case O_COMMA:
              ;
              break;
            default:
              jj_la1[12] = jj_gen;
              break label_6;
            }
            jj_consume_token(O_COMMA);
            jj_consume_token(S_INTEGER);
                                                                                                            jjtn000.spans.add(Integer.parseInt(token.image));
          }
          break;
        case K_TIMESPAN:
          jj_consume_token(K_TIMESPAN);
          jj_consume_token(O_EQ);
          jj_consume_token(S_IDENTIFIER);
                                       jjtn000.timespans.add(token.image);
          label_7:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case O_COMMA:
              ;
              break;
            default:
              jj_la1[13] = jj_gen;
              break label_7;
            }
            jj_consume_token(O_COMMA);
            jj_consume_token(S_IDENTIFIER);
                                                                                                     jjtn000.timespans.add(token.image);
          }
          break;
        default:
          jj_la1[14] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      StatsFunction();
      label_8:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[16] = jj_gen;
          break label_8;
        }
        jj_consume_token(O_COMMA);
        StatsFunction();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_BY:
        ByClause();
        break;
      default:
        jj_la1[17] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void StatsFunction() throws ParseException {
                                  /*@bgen(jjtree) _StatsFunc */
  AST_StatsFunc jjtn000 = new AST_StatsFunc(JJT_STATSFUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COUNT:
        jj_consume_token(K_COUNT);
                     jjtn000.func.type = Function.COUNT;
        break;
      case K_SUM:
        jj_consume_token(K_SUM);
             jjtn000.func.type = Function.SUM;
        break;
      case K_DC:
        jj_consume_token(K_DC);
            jjtn000.func.type = Function.DC;
        break;
      case K_MAX:
        jj_consume_token(K_MAX);
             jjtn000.func.type = Function.MAX;
        break;
      case K_MIN:
        jj_consume_token(K_MIN);
             jjtn000.func.type = Function.MIN;
        break;
      case K_AVG:
        jj_consume_token(K_AVG);
             jjtn000.func.type = Function.AVG;
        break;
      default:
        jj_la1[18] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
     jjtn000.func.name = token.image;
      jj_consume_token(O_LPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
                  jjtn000.func.fieldtype = Field.SINGLE; jjtn000.func.field = token.image;
        break;
      case S_QUOTED_STRING:
        jj_consume_token(S_QUOTED_STRING);
                    jjtn000.func.fieldtype = Field.SCRIPT; jjtn000.func.field = token.image.substring(1, token.image.length() - 1);
        break;
      default:
        jj_la1[19] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(O_RPAREN);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_AS:
        jj_consume_token(K_AS);
        jj_consume_token(S_IDENTIFIER);
                           jjtn000.func.as = token.image;
        break;
      default:
        jj_la1[20] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DESC:
      case K_ASC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
          jj_consume_token(K_DESC);
             jjtn000.func.order = -1;
          break;
        case K_ASC:
          jj_consume_token(K_ASC);
                                                  jjtn000.func.order = 1;
          break;
        default:
          jj_la1[21] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[22] = jj_gen;
        ;
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void EvalExpression() throws ParseException {
                                  /*@bgen(jjtree) _EvalExpr */
  AST_EvalExpr jjtn000 = new AST_EvalExpr(JJT_EVALEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_EVAL);
      jj_consume_token(O_LPAREN);
      jj_consume_token(S_QUOTED_STRING);
                                       jjtn000.script = token.image.substring(1, token.image.length() - 1);
      jj_consume_token(O_RPAREN);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void DeleteStatement() throws ParseException {
                                 /*@bgen(jjtree) _Delete */
  AST_Delete jjtn000 = new AST_Delete(JJT_DELETE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_DELETE);
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void FieldList() throws ParseException {
                                /*@bgen(jjtree) _IdentList */
  AST_IdentList jjtn000 = new AST_IdentList(JJT_IDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
                  jjtn000.names.add(token.image);
      label_9:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[23] = jj_gen;
          break label_9;
        }
        jj_consume_token(O_COMMA);
        jj_consume_token(S_IDENTIFIER);
                              jjtn000.names.add(token.image);
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

/*
void TopStatement() #_Top : {}
{
  <K_TOP> (LOOKAHEAD(2)TopOption())* FieldList() [ ByClause() ]
}
void TopOption() #_TopOption : {}
{
  <K_COUNTFIELD> <O_EQ> <S_IDENTIFIER> {jjtThis.opt.type = Option.COUNTFIELD; jjtThis.opt.value = token.image;}
  | 
  <K_LIMIT> <O_EQ> <S_INTEGER>  {jjtThis.opt.type = Option.LIMIT; jjtThis.opt.value = token.image;}
  | 
  <K_OTHERSTR> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.OTHERSTR; jjtThis.opt.value = token.image;}
  | 
  <K_PERCENTFIELD> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.PERCENTFIELD; jjtThis.opt.value = token.image;}
  | 
  <K_SHOWCOUNT> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.SHOWCOUNT; jjtThis.opt.value = token.image;}
  | 
  <K_SHOWPERC> <O_EQ> <S_IDENTIFIER>  {jjtThis.opt.type = Option.SHOWPERC; jjtThis.opt.value = token.image;}
  | 
  <K_USEOTHER> <O_EQ> <S_IDENTIFIER> {jjtThis.opt.type = Option.USEOTHER; jjtThis.opt.value = token.image;}
  |
  <K_MINCOUNT> <O_EQ> <S_INTEGER> {jjtThis.opt.type = Option.MINCOUNT; jjtThis.opt.value = token.image;}
  
}
*/
  final public void ByClause() throws ParseException {
                                 /*@bgen(jjtree) _ByIdentList */
  AST_ByIdentList jjtn000 = new AST_ByIdentList(JJT_BYIDENTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_BY);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_EVAL:
        jj_consume_token(K_EVAL);
        jj_consume_token(O_LPAREN);
        jj_consume_token(S_QUOTED_STRING);
                                       jjtn000.addField(token.image.substring(1, token.image.length() - 1));jjtn000.setScript();
        jj_consume_token(O_RPAREN);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AS:
          jj_consume_token(K_AS);
          jj_consume_token(S_IDENTIFIER);
                           jjtn000.setAs(token.image);
          break;
        default:
          jj_la1[24] = jj_gen;
          ;
        }
        break;
      case S_IDENTIFIER:
        jj_consume_token(S_IDENTIFIER);
                  jjtn000.addField(token.image);
        break;
      default:
        jj_la1[25] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_COUNTORDER:
        jj_consume_token(K_COUNTORDER);
                    jjtn000.setCountOrder();
        break;
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_DESC:
      case K_ASC:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
          jj_consume_token(K_DESC);
            jjtn000.setDesc(true);
          break;
        case K_ASC:
          jj_consume_token(K_ASC);
                                              jjtn000.setDesc(false);
          break;
        default:
          jj_la1[27] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      default:
        jj_la1[28] = jj_gen;
        ;
      }
      label_10:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case O_COMMA:
          ;
          break;
        default:
          jj_la1[29] = jj_gen;
          break label_10;
        }
        jj_consume_token(O_COMMA);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_EVAL:
          jj_consume_token(K_EVAL);
          jj_consume_token(O_LPAREN);
          jj_consume_token(S_QUOTED_STRING);
                                           jjtn000.addField(token.image.substring(1, token.image.length() - 1));jjtn000.setScript();
          jj_consume_token(O_RPAREN);
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_AS:
            jj_consume_token(K_AS);
            jj_consume_token(S_IDENTIFIER);
                               jjtn000.setAs(token.image);
            break;
          default:
            jj_la1[30] = jj_gen;
            ;
          }
          break;
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
                      jjtn000.addField(token.image);
          break;
        default:
          jj_la1[31] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_COUNTORDER:
          jj_consume_token(K_COUNTORDER);
                      jjtn000.setCountOrder();
          break;
        default:
          jj_la1[32] = jj_gen;
          ;
        }
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_DESC:
        case K_ASC:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case K_DESC:
            jj_consume_token(K_DESC);
              jjtn000.setDesc(true);
            break;
          case K_ASC:
            jj_consume_token(K_ASC);
                                                jjtn000.setDesc(false);
            break;
          default:
            jj_la1[33] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          break;
        default:
          jj_la1[34] = jj_gen;
          ;
        }
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SearchStatement() throws ParseException {
                                 /*@bgen(jjtree) _Search */
  AST_Search jjtn000 = new AST_Search(JJT_SEARCH);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(K_SEARCH);
      label_11:
      while (true) {
        if (jj_2_1(2)) {
          ;
        } else {
          break label_11;
        }
        SearchOption();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
      case O_LPAREN:
      case S_INTEGER:
      case S_FLOAT:
      case S_IDENTIFIER:
      case S_QUOTED_STRING:
        BooleanExpression();
        break;
      default:
        jj_la1[35] = jj_gen;
        ;
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void BooleanExpression() throws ParseException {
                                     /*@bgen(jjtree) _OrExpr */
  AST_OrExpr jjtn000 = new AST_OrExpr(JJT_OREXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      AndExpression();
      label_12:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_OR:
          ;
          break;
        default:
          jj_la1[36] = jj_gen;
          break label_12;
        }
        jj_consume_token(K_OR);
        AndExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void AndExpression() throws ParseException {
                                  /*@bgen(jjtree) _AndExpr */
  AST_AndExpr jjtn000 = new AST_AndExpr(JJT_ANDEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      UnaryExpression();
      label_13:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case K_AND:
          ;
          break;
        default:
          jj_la1[37] = jj_gen;
          break label_13;
        }
        jj_consume_token(K_AND);
        UnaryExpression();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void UnaryExpression() throws ParseException {
                                     /*@bgen(jjtree) _UnaryExpr */
  AST_UnaryExpr jjtn000 = new AST_UnaryExpr(JJT_UNARYEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_NOT:
        jj_consume_token(K_NOT);
           jjtn000.isNot = true;
        break;
      default:
        jj_la1[38] = jj_gen;
        ;
      }
      if (jj_2_2(2147483647)) {
        jj_consume_token(O_LPAREN);
        BooleanExpression();
        jj_consume_token(O_RPAREN);
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
        case S_FLOAT:
        case S_IDENTIFIER:
        case S_QUOTED_STRING:
          PredicateExpression();
          break;
        default:
          jj_la1[39] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void SearchOption() throws ParseException {
                                     /*@bgen(jjtree) _SearchOption */
  AST_SearchOption jjtn000 = new AST_SearchOption(JJT_SEARCHOPTION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case K_HASCHILD:
        jj_consume_token(K_HASCHILD);
        jj_consume_token(O_EQ);
        jj_consume_token(O_LPAREN);
        jj_consume_token(K_SOURCETYPE);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                                                      jjtn000.opt.type = Option.HASCHILD; jjtn000.opt.value = token.image;
        BooleanExpression();
        jj_consume_token(O_RPAREN);
        break;
      case K_HASPARENT:
        jj_consume_token(K_HASPARENT);
        jj_consume_token(O_EQ);
        jj_consume_token(O_LPAREN);
        jj_consume_token(K_SOURCETYPE);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                                                       jjtn000.opt.type = Option.HASPARENT; jjtn000.opt.value = token.image;
        BooleanExpression();
        jj_consume_token(O_RPAREN);
        break;
      case K_TIMEFORMAT:
        jj_consume_token(K_TIMEFORMAT);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                         jjtree.closeNodeScope(jjtn000, true);
                                         jjtc000 = false;
                                        jjtn000.opt.type = Option.TIMEFORMAT; jjtn000.opt.value = token.image;
        break;
      case K_STARTTIME:
        jj_consume_token(K_STARTTIME);
        jj_consume_token(O_EQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.opt.type = Option.STARTTIME; jjtn000.opt.value = token.image;
          break;
        case S_QUOTED_STRING:
          jj_consume_token(S_QUOTED_STRING);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.opt.type = Option.STARTTIME; jjtn000.opt.value = token.image.substring(1, token.image.length() - 1);
          break;
        default:
          jj_la1[40] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_ENDTIME:
        jj_consume_token(K_ENDTIME);
        jj_consume_token(O_EQ);
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
                   jjtree.closeNodeScope(jjtn000, true);
                   jjtc000 = false;
                   jjtn000.opt.type = Option.ENDTIME; jjtn000.opt.value = token.image;
          break;
        case S_QUOTED_STRING:
          jj_consume_token(S_QUOTED_STRING);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.opt.type = Option.ENDTIME; jjtn000.opt.value = token.image.substring(1, token.image.length() - 1);
          break;
        default:
          jj_la1[41] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
        break;
      case K_EARLIEST:
        jj_consume_token(K_EARLIEST);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                       jjtree.closeNodeScope(jjtn000, true);
                                       jjtc000 = false;
                                       jjtn000.opt.type = Option.EARLIEST; jjtn000.opt.value = token.image;
        break;
      case K_LATEST:
        jj_consume_token(K_LATEST);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                     jjtree.closeNodeScope(jjtn000, true);
                                     jjtc000 = false;
                                     jjtn000.opt.type = Option.LATEST; jjtn000.opt.value = token.image;
        break;
      case K_SOURCETYPE:
        jj_consume_token(K_SOURCETYPE);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                         jjtn000.opt.type = Option.SOURCETYPE; jjtn000.opt.value = token.image;
        label_14:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_COMMA:
            ;
            break;
          default:
            jj_la1[42] = jj_gen;
            break label_14;
          }
          jj_consume_token(O_COMMA);
          jj_consume_token(S_IDENTIFIER);
                                                                                                                                         jjtn000.opt.value += ("," + token.image);
        }
        break;
      case K_INDEX:
        jj_consume_token(K_INDEX);
        jj_consume_token(O_EQ);
        jj_consume_token(S_IDENTIFIER);
                                    jjtn000.opt.type = Option.INDEX; jjtn000.opt.value = token.image;
        label_15:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case O_COMMA:
            ;
            break;
          default:
            jj_la1[43] = jj_gen;
            break label_15;
          }
          jj_consume_token(O_COMMA);
          jj_consume_token(S_IDENTIFIER);
                                                                                                                               jjtn000.opt.value += ("," + token.image);
        }
        break;
      default:
        jj_la1[44] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void PredicateExpression() throws ParseException {
                                                    /*@bgen(jjtree) _PredicateExpression */
  AST_PredicateExpression jjtn000 = new AST_PredicateExpression(JJT_PREDICATEEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      if (jj_2_5(2)) {
        ComparisonExpression();
        label_16:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case S_INTEGER:
          case S_FLOAT:
          case S_IDENTIFIER:
          case S_QUOTED_STRING:
            ;
            break;
          default:
            jj_la1[45] = jj_gen;
            break label_16;
          }
          if (jj_2_3(2)) {
            ComparisonExpression();
          } else {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S_INTEGER:
            case S_FLOAT:
            case S_IDENTIFIER:
            case S_QUOTED_STRING:
              TermExpression();
              break;
            default:
              jj_la1[46] = jj_gen;
              jj_consume_token(-1);
              throw new ParseException();
            }
          }
        }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
        case S_FLOAT:
        case S_IDENTIFIER:
        case S_QUOTED_STRING:
          TermExpression();
          label_17:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case S_INTEGER:
            case S_FLOAT:
            case S_IDENTIFIER:
            case S_QUOTED_STRING:
              ;
              break;
            default:
              jj_la1[47] = jj_gen;
              break label_17;
            }
            if (jj_2_4(2)) {
              ComparisonExpression();
            } else {
              switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
              case S_INTEGER:
              case S_FLOAT:
              case S_IDENTIFIER:
              case S_QUOTED_STRING:
                TermExpression();
                break;
              default:
                jj_la1[48] = jj_gen;
                jj_consume_token(-1);
                throw new ParseException();
              }
            }
          }
          break;
        default:
          jj_la1[49] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void TermExpression() throws ParseException {
                                         /*@bgen(jjtree) _TermExpression */
  AST_TermExpression jjtn000 = new AST_TermExpression(JJT_TERMEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
      case S_FLOAT:
      case S_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          jj_consume_token(S_INTEGER);
          break;
        case S_FLOAT:
          jj_consume_token(S_FLOAT);
          break;
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[50] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      jjtree.closeNodeScope(jjtn000, true);
      jjtc000 = false;
     jjtn000.type = AST_TermExpression.TERM;jjtn000.term = token.image;
        break;
      case S_QUOTED_STRING:
        jj_consume_token(S_QUOTED_STRING);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.type = AST_TermExpression.PHRASE; jjtn000.term = token.image.substring(1, token.image.length() - 1);
        break;
      default:
        jj_la1[51] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  final public void ComparisonExpression() throws ParseException {
                                                     /*@bgen(jjtree) _ComparisonExpression */
  AST_ComparisonExpression jjtn000 = new AST_ComparisonExpression(JJT_COMPARISONEXPRESSION);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(S_IDENTIFIER);
                  jjtn000.expr.field = token.image;
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case O_EQ:
        jj_consume_token(O_EQ);
            jjtn000.expr.oper = Expression.EQ;
        break;
      case O_NEQ:
        jj_consume_token(O_NEQ);
             jjtn000.expr.oper = Expression.NEQ;
        break;
      case O_GT:
        jj_consume_token(O_GT);
            jjtn000.expr.oper = Expression.GT;
        break;
      case O_GTE:
        jj_consume_token(O_GTE);
             jjtn000.expr.oper = Expression.GTE;
        break;
      case O_LT:
        jj_consume_token(O_LT);
            jjtn000.expr.oper = Expression.LT;
        break;
      case O_LTE:
        jj_consume_token(O_LTE);
            jjtn000.expr.oper = Expression.LTE;
        break;
      default:
        jj_la1[52] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case S_INTEGER:
      case S_FLOAT:
      case S_IDENTIFIER:
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case S_INTEGER:
          jj_consume_token(S_INTEGER);
          break;
        case S_FLOAT:
          jj_consume_token(S_FLOAT);
          break;
        case S_IDENTIFIER:
          jj_consume_token(S_IDENTIFIER);
          break;
        default:
          jj_la1[53] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
                                                                                jjtree.closeNodeScope(jjtn000, true);
                                                                                jjtc000 = false;
                                                                               jjtn000.expr.value = token.image ;jjtn000.expr.valueType = AST_TermExpression.TERM;
        break;
      case S_QUOTED_STRING:
        jj_consume_token(S_QUOTED_STRING);
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                     jjtn000.expr.value = token.image.substring(1, token.image.length() - 1); jjtn000.expr.valueType = AST_TermExpression.PHRASE;
        break;
      default:
        jj_la1[54] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_3R_29() {
    if (jj_scan_token(K_INDEX)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_scan_token(K_SOURCETYPE)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_scan_token(K_LATEST)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_scan_token(K_EARLIEST)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_scan_token(K_ENDTIME)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_50() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(K_AND)) return true;
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_scan_token(K_STARTTIME)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(K_TIMEFORMAT)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_scan_token(O_LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(O_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(K_HASPARENT)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(K_HASCHILD)) return true;
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_21()) {
    jj_scanpos = xsp;
    if (jj_3R_22()) {
    jj_scanpos = xsp;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_scan_token(K_OR)) return true;
    if (jj_3R_30()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_53() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(O_LPAREN)) return true;
    if (jj_3R_19()) return true;
    if (jj_scan_token(O_RPAREN)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(K_NOT)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_40()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_41()) {
    jj_scanpos = xsp;
    if (jj_3R_42()) return true;
    }
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_18()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_38()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_39()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_19() {
    if (jj_3R_30()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_31()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_45() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_3()) {
    jj_scanpos = xsp;
    if (jj_3R_50()) return true;
    }
    return false;
  }

  private boolean jj_3R_49() {
    if (jj_scan_token(S_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_48() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(O_LTE)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(O_LT)) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(O_GTE)) return true;
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_scan_token(O_GT)) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_scan_token(O_NEQ)) return true;
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_scan_token(O_EQ)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_47() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_4()) {
    jj_scanpos = xsp;
    if (jj_3R_53()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    if (jj_scan_token(S_IDENTIFIER)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) {
    jj_scanpos = xsp;
    if (jj_3R_37()) return true;
    }
    }
    }
    }
    }
    xsp = jj_scanpos;
    if (jj_3R_48()) {
    jj_scanpos = xsp;
    if (jj_3R_49()) return true;
    }
    return false;
  }

  private boolean jj_3R_52() {
    if (jj_scan_token(S_QUOTED_STRING)) return true;
    return false;
  }

  private boolean jj_3R_51() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(83)) {
    jj_scanpos = xsp;
    if (jj_scan_token(85)) {
    jj_scanpos = xsp;
    if (jj_scan_token(86)) return true;
    }
    }
    return false;
  }

  private boolean jj_3R_46() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_51()) {
    jj_scanpos = xsp;
    if (jj_3R_52()) return true;
    }
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_3R_46()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_47()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3_5() {
    if (jj_3R_20()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_45()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_43() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3R_44()) return true;
    }
    return false;
  }

  /** Generated Token Manager. */
  public CommandParserTokenManager token_source;
  JavaCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[55];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static private int[] jj_la1_2;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
      jj_la1_init_2();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x0,0x0,0x0,0xc000000,0xc000000,0x0,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0x0,0x0,0x100200,0x100200,0x0,0x800000,0x0,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x0,0x0,0xc000000,0xc000000,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x2f8000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x80018000,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x17c00000,0x0,0x20000000,0x0,0x0,0x0,0x20000000,0x8000000,0x0,0x0,0x0,0x0,0x20000000,0x8000000,0x0,0x0,0x0,0x200,0x100,0x0,0x200,0x0,0x0,0x0,0x0,0x0,0x300008,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,};
   }
   private static void jj_la1_init_2() {
      jj_la1_2 = new int[] {0x10000,0x1,0x80000,0x0,0x0,0x2000,0x0,0x0,0x2400000,0x2400000,0x2000,0x2000,0x2000,0x2000,0x6,0x6,0x2000,0x0,0x0,0x2400000,0x0,0x0,0x0,0x2000,0x0,0x400000,0x8,0x0,0x0,0x2000,0x0,0x400000,0x8,0x0,0x0,0x2680800,0x0,0x0,0x0,0x2680000,0x2400000,0x2400000,0x2000,0x2000,0x0,0x2680000,0x2680000,0x2680000,0x2680000,0x2680000,0x680000,0x2680000,0x7e0,0x680000,0x2680000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[5];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public CommandParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public CommandParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public CommandParser(java.io.Reader stream) {
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new CommandParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public CommandParser(CommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CommandParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 55; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[93];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 55; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
          if ((jj_la1_2[i] & (1<<j)) != 0) {
            la1tokens[64+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 93; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 5; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}